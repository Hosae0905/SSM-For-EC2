pipeline {
    agent any
    tools {
        maven "maven3.9.6"
    }
    environment {
        //Docker Hub 아이디와 비밀번호 설정
        dockerhubid = '도커_아이디'
        dockerhubpw = '도커_비밀번호'
        SLACK_CHANNEL = '#slack-notification'
        SLACK_TOKEN = 'slack-token'
        TEAM_DOMAIN = 'lat32t'
    }
    stages {
        stage('git clone') {
            steps {
                // GitHub 저장소에서 코드를 클론합니다.
                git branch: 'develop', url: 'https://github.com/beyond-sw-camp/be02-fin-LAT32T-SSM.git'
            }
            post {
                success {
                    slackSend (channel: SLACK_CHANNEL, color: '#00FF00', message: "SUCCESSFUL: stage - [Git Clone] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
                failure {
                    slackSend (channel: SLACK_CHANNEL, color: '#FF0000', message: "FAILED: stage - [Git Clone] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
            }
        }
        stage('Project Clean') {
            steps {
                dir('backend') {
                    sh 'pwd'
                    sh 'mvn clean'
                }
            }
            post {
                success {
                    slackSend (channel: SLACK_CHANNEL, color: '#00FF00', message: "SUCCESSFUL: stage - [Project Clean] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
                failure {
                    slackSend (channel: SLACK_CHANNEL, color: '#FF0000', message: "FAILED: stage - [Project Clean] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
            }
        }
        stage('Project Compile') {
            steps {
                dir('backend') {
                    sh 'pwd'
                    sh 'mvn compile'
                }
            }
            post {
                success {
                    slackSend (channel: SLACK_CHANNEL, color: '#00FF00', message: "SUCCESSFUL: stage - [Project Compile] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
                failure {
                    slackSend (channel: SLACK_CHANNEL, color: '#FF0000', message: "FAILED: stage - [Project Compile] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
            }
        }
        stage('Project Test') {
            steps {
                dir('backend') {
                    sh 'pwd'
                    sh 'mvn test'
                }
            }
            post {
                success {
                    slackSend (channel: SLACK_CHANNEL, color: '#00FF00', message: "SUCCESSFUL: stage - [Project Test] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
                failure {
                    slackSend (channel: SLACK_CHANNEL, color: '#FF0000', message: "FAILED: stage - [Project Test] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
            }
        }
        stage('Project Build') {
            steps {
                dir('backend') {
                    sh 'pwd'
                    sh 'ls -al'
                    sh 'mvn package'
                }
            }
            post {
                success {
                    slackSend (channel: SLACK_CHANNEL, color: '#00FF00', message: "SUCCESSFUL: stage - [Project Build] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
                failure {
                    slackSend (channel: SLACK_CHANNEL, color: '#FF0000', message: "FAILED: stage - [Project Build] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
            }
        }
        stage('Docker Build') {
            steps {
                // Docker 이미지 빌드
                dir('backend') {
                    sh 'pwd'
                    sh 'ls -al'
                    sh "docker build -t hosin/lat32t:backend1.${BUILD_ID} ."
                }
            }
            post {
                success {
                    slackSend (channel: SLACK_CHANNEL, color: '#00FF00', message: "SUCCESSFUL: stage - [Docker Build] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
                failure {
                    slackSend (channel: SLACK_CHANNEL, color: '#FF0000', message: "FAILED: stage - [Docker Build] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
            }
        }
        stage('Docker Push') {
            steps {
                // Docker Hub에 로그인해서 Docker 이미지를 push
                sh "docker login -u $dockerhubid -p $dockerhubpw"
                sh "docker push hosin/lat32t:backend1.${BUILD_ID}"
            }
            post {
                success {
                    slackSend (channel: SLACK_CHANNEL, color: '#00FF00', message: "SUCCESSFUL: stage - [Docker Push] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
                failure {
                    slackSend (channel: SLACK_CHANNEL, color: '#FF0000', message: "FAILED: stage - [Docker Push] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
            }
        }
        stage('Send Artifacts Over SSH') {
            steps {
               // k8s ssm-service 매니패스트 파일을 SSH를 통해 전송
                sshPublisher(
                    publishers: [
                        sshPublisherDesc(
                            configName: 'master',
                            transfers: [
                                sshTransfer(
                                    sourceFiles: 'backend/backend-deployment.yml',
                                    removePrefix: 'backend/',
                                    remoteDirectory: '/root/'
                                )
                            ]
                        )
                    ]
                )
            }
            post {
                success {
                    slackSend (channel: SLACK_CHANNEL, color: '#00FF00', message: "SUCCESSFUL: stage - [Send Artifacts Over SSH] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
                failure {
                    slackSend (channel: SLACK_CHANNEL, color: '#FF0000', message: "FAILED: stage - [Send Artifacts Over SSH] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
            }
        }
        stage('Modify and Apply Deployment') {
            steps {
                sshPublisher(
                    publishers: [
                        sshPublisherDesc(
                            configName: 'master',
                            transfers: [
                                sshTransfer(
                                    execCommand: '''
                                        sed -i 's/VERSION/${BUILD_ID}/g' /root/root/backend-deployment.yml
                                        kubectl apply -f ./root/backend-deployment.yml
                                    '''
                                )
                            ]
                        )
                    ]
                )
            }
            post {
                success {
                    slackSend (channel: SLACK_CHANNEL, color: '#00FF00', message: "SUCCESSFUL: stage - [Modify and Apply Deployment] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
                failure {
                    slackSend (channel: SLACK_CHANNEL, color: '#FF0000', message: "FAILED: stage - [Modify and Apply Deployment] Job Info - '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", teamDomain: TEAM_DOMAIN, tokenCredentialId: SLACK_TOKEN)
                }
            }
        }
    }
}